{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","id","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","activateViewMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","aria-label","removeTodolist","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","HeaderAppBar","Box","sx","flexGrow","AppBar","position","Container","style","display","justifyContent","Toolbar","size","edge","Menu","Typography","component","App","todolistId","todolistTasks","setTasks","task","v1","todolist","todolists","find","tl","setTodolists","changeStatus","newTitle","todolistId1","todolistId2","Grid","container","padding","paddingLeft","Paper","newTodolistId","spacing","allTodolistTasks","tasksForTodolist","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8fa64d0b.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField id={'outlined-basic'}\r\n                   variant={'outlined'}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label={error ? error : 'Title'}\r\n                   error={!!error}\r\n        />\r\n        <IconButton color={'primary'}\r\n                    onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n\r\n        {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onkeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            activateViewMode()\r\n        }\r\n    }\r\n    return editMode\r\n        ? <TextField variant={'outlined'}\r\n                     value={title}\r\n                     onChange={changeTitle}\r\n                     autoFocus\r\n                     onBlur={activateViewMode}\r\n                     onKeyPress={onkeyPressHandler}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton,} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n\r\n            <IconButton aria-label=\"delete\" onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox checked={t.isDone} color={'primary'} onChange={onChangeHandler}/>\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler}/>\r\n                        <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"outlined\" : \"text\"} color={'primary'}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? \"outlined\" : \"text\"} color={'primary'}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? \"outlined\" : \"text\"} color={'primary'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n"," import React from 'react';\r\n import {AppBar, Box, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core';\r\n import {Menu} from '@material-ui/icons';\r\n\r\n export const HeaderAppBar = () => {\r\n     return (\r\n         <Box sx={{flexGrow: 1}}>\r\n             <AppBar position=\"static\">\r\n                 <Container style={{display:'flex', justifyContent:'space-between'}}>\r\n                     <Toolbar>\r\n                         <IconButton\r\n                             size=\"medium\"\r\n                             edge=\"start\"\r\n                             color=\"inherit\"\r\n                             aria-label=\"menu\"\r\n                             //sx={{ mr: 2 }}\r\n                         >\r\n                             <Menu/>\r\n                         </IconButton>\r\n                         <Typography variant=\"h6\"\r\n                                     component=\"div\"\r\n                                  //  sx={{flexGrow: 1}}\r\n                         >\r\n                             News\r\n                         </Typography>\r\n                     </Toolbar>\r\n                         <Button color=\"inherit\">Login</Button>\r\n                 </Container>\r\n             </AppBar>\r\n         </Box>\r\n     );\r\n };\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {Container, Grid, Paper} from '@material-ui/core';\r\nimport { HeaderAppBar} from './Header';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = newTitle;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            // если нашёлся - изменим ему заголовок\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1();\r\n        let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <HeaderAppBar/>\r\n            <Container>\r\n                <Grid container style={{padding: '20px', paddingLeft: '0'}}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <AddItemForm addItem={addTodolist}/>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => !t.isDone);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}